package main

import (
	"math/rand"

	"github.com/gin-gonic/gin"
)

// Initialize and start the web server
func InitWebServer() {
	engine := gin.Default()
	engine.LoadHTMLGlob("./web/templates/*")
	engine.Static("/static", "./web/static")
	engine.GET("/", func(c *gin.Context) {
		c.HTML(200, "pages/index", gin.H{
			"topology": ObservedTopology,
		})
	})
	engine.GET("/applications", func(c *gin.Context) {
		// Prepare data. For this view, we need: Applications > Servers > Status
		// TODO: Cache

		c.HTML(200, "pages/applications", gin.H{
			"topology": ObservedTopology,
		})
	})
	restGroup := engine.Group("/api/rest")
	{
		restGroup.GET("/topology", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"topology": ObservedTopology,
			})
		})
		restGroup.GET("/applications", func(c *gin.Context) {
			// Prepare data. For this view, we need: Applications > Servers > Status
			// TODO: Cache
			c.JSON(200, gin.H{
				"applications": ObservedTopology.Applications,
			})
		})
		restGroup.GET("/application/:app", func(c *gin.Context) {
			appName := c.Param("app")
			if _, ok := ObservedTopology.Applications[appName]; !ok {
				c.JSON(404, gin.H{
					"error": "Application not found",
				})
				return
			} else {
				c.JSON(200, gin.H{
					"applications": ObservedTopology.Applications[appName],
				})
			}
		})
		restGroup.GET("/servers", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"servers": ObservedTopology.Servers,
			})
		})
		restGroup.GET("/server/:server", func(c *gin.Context) {
			serverName := c.Param("server")
			if _, ok := ObservedTopology.Servers[serverName]; !ok {
				c.JSON(404, gin.H{
					"error": "Server not found",
				})
				return
			} else {
				c.JSON(200, gin.H{
					"server": ObservedTopology.Servers[serverName],
				})
			}
		})
		restGroup.GET("/health", func(c *gin.Context) {
			app := c.Query("application")
			server := c.Query("server")
			if app == "" || server == "" {
				c.JSON(400, gin.H{
					"error": "Both application and server are required",
				})
				return
			}
			if _, ok := ObservedTopology.Applications[app]; !ok {
				c.JSON(404, gin.H{
					"error": "Application not found",
				})
				return
			}
			if _, ok := ObservedTopology.Servers[server]; !ok {
				c.JSON(404, gin.H{
					"error": "Server not found",
				})
				return
			}
			c.JSON(200, gin.H{})
		})
	}
	htmxGroup := engine.Group("/api/htmx")
	{
		htmxGroup.GET("/health", func(c *gin.Context) {
			app := c.Query("application")
			server := c.Query("server")
			if app == "" || server == "" {
				c.JSON(400, gin.H{
					"error": "Both application and server are required",
				})
				return
			}
			if _, ok := ObservedTopology.Applications[app]; !ok {
				c.JSON(404, gin.H{
					"error": "Application not found",
				})
				return
			}
			if _, ok := ObservedTopology.Servers[server]; !ok {
				c.JSON(404, gin.H{
					"error": "Server not found",
				})
				return
			}
			c.HTML(200, "template/application.small", gin.H{
				"Application": ObservedTopology.Applications[app],
				"Server":      ObservedTopology.Applications[app].Server.Name,
				"Healthy":     rand.Intn(2) == 1,
			})
		})
	}
	engine.Run(":8080")
}
